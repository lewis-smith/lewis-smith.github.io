<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: analytics | Learning About Making and Selling iOS Apps]]></title>
  <link href="http://lewisalexander.github.io/blog/categories/analytics/atom.xml" rel="self"/>
  <link href="http://lewisalexander.github.io/"/>
  <updated>2013-12-24T15:50:15+11:00</updated>
  <id>http://lewisalexander.github.io/</id>
  <author>
    <name><![CDATA[Lewis Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[a/b testing for getting more app store reviews]]></title>
    <link href="http://lewisalexander.github.io/blog/2013/07/13/a-slash-b-testing-for-getting-more-reviews/"/>
    <updated>2013-07-13T18:59:00+10:00</updated>
    <id>http://lewisalexander.github.io/blog/2013/07/13/a-slash-b-testing-for-getting-more-reviews</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;This is very useful and makes it easy to measure everything I need in my weight loss regime. Very good motivator- better than the scale!&rdquo;</p>

<p>&ldquo;I love this app. It is a great tool to track weight loss!!!&rdquo;</p></blockquote>

<p>People obviously enjoy using our app, but I wish more people would go ahead and say so.</p>

<p>All we&rsquo;d done to encourage reviews is add <a href="https://github.com/LukeDurrant/Ask4AppReviews">Ask4AppReviews</a> to the code and let it go. This did get us reviews, but not as many as we would like (or frankly think that we deserve).</p>

<!-- more -->


<p>When we thought about how <em>we</em> used our app, we realised that we always take our measurements first thing in the morning. This is before work time and personally <strong>I would NEVER review an app while I&rsquo;m rushing to get ready for work</strong>. But I would later in the day if I was just browsing my measurements.</p>

<p><strong>I&rsquo;d be even more likely to leave a review on a Saturday or a Sunday.</strong></p>

<p>As we don&rsquo;t have any analytics on this we couldn&rsquo;t check the time of day theory, but we checked the week day part. <strong>It turns out that although we have a lot less users on the weekend, half our reviews have come on those two days.</strong></p>

<h2>Goals</h2>

<p>So with the above in mind we set the following goals:</p>

<ol>
<li>Be able to test different times of day for prompting</li>
<li>Be able to test different messages &ndash; fine tuning this has got to make a difference</li>
<li>Both of the above should be configurable without a new release through the app store</li>
<li>Get analytics on all stages of the <a href="https://github.com/LukeDurrant/Ask4AppReviews">Ask4AppReviews</a> process, when we ask, when users start sending an email, when they say no or ask later, everything</li>
</ol>


<h2>Implementation</h2>

<p>I figured I needed to make the following changes to <a href="https://github.com/LukeDurrant/Ask4AppReviews">Ask4AppReviews</a>:</p>

<ol>
<li>Add a <a href="http://developer.apple.com/library/ios/#documentation/general/conceptual/CocoaEncyclopedia/DelegatesandDataSources/DelegatesandDataSources.html">delegate</a> so you can capture analytics events</li>
<li>Make all of the hard coded values in <a href="https://github.com/LukeDurrant/Ask4AppReviews">Ask4AppReviews</a> <a href="http://stackoverflow.com/questions/9544370/objective-c-property-and-synthesize-logic">@properties</a> so we could configure them at run time for <a href="http://en.wikipedia.org/wiki/A/B_testing">A/B</a> testing</li>
<li>Add a way of specifying a time of day to show the prompt. Also configurable at runtime</li>
</ol>


<p>I <a href="https://help.github.com/articles/fork-a-repo">forked</a> <a href="https://github.com/LukeDurrant/Ask4AppReviews">Ask4AppReviews</a> and have updated it with these changes here: <a href="https://github.com/lewisalexander/Ask4AppReviewsABOptimised">Ask4AppReviewsABOptimised</a></p>

<p>The next thing is to setup <a href="http://en.wikipedia.org/wiki/A/B_testing">A/B Testing</a> on a server. <a href="https://github.com/KeepSafe/Switchboard">SwitchBoard</a> seemed to be the best option for that and I wrote two experiments, one for each of the first two goals above. For now though only the times are actually in a split test. Although the messages are returned from a test, every user sees the same message. When you&rsquo;re doing <a href="http://en.wikipedia.org/wiki/A/B_testing">A/B Testing</a> you should only be testing one variable at a time, especially when working with relatively small datasets.</p>

<p>For the time to prompt we&rsquo;ve setup three groups:
&ndash; Weekday mornings
&ndash; Weekday afternoons
&ndash; Weekends all day</p>

<h2>Some code</h2>

<p>Here&rsquo;s how I initialise <a href="https://github.com/lewisalexander/Ask4AppReviewsABOptimised">Ask4AppReviewsABOptimised</a>:</p>

<pre><code>-(void) setupAskForReviews
{
    [Ask4AppReviews appLaunched:NO viewController: self.window.rootViewController];
    Ask4AppReviews *ask4AppReviews = [Ask4AppReviews sharedInstance];
        AskForAppReviewsDelegate *reviewsDelegate = [[AskForAppReviewsDelegate alloc] init];

    if([Switchboard isInExperiment:@"timeForReview"]) {
        NSLog(@"isInExperiment time for review");
        if([Switchboard hasExperimentValues:@"timeForReview"]) {
            ask4AppReviews.eventsUntilPrompt = 1;
            NSLog(@"has switchboard values");

            NSDictionary *values = [Switchboard getExperimentValueFromJSON:@"timeForReview"];

            NSString *description = [values objectForKey:@"description"];
            NSNumber *startHour = [values objectForKey:@"startHour"];
            NSNumber *endHour = [values objectForKey:@"endHour"];

            ask4AppReviews.timeRange = [[Ask4AppReviewsTimeRange alloc]
                                        initWithDaysOfWeek:[values objectForKey:@"days"]
                                        startHour:startHour.integerValue
                                        endHour:endHour.integerValue
                                        description:[values objectForKey:@"description"]];

            reviewsDelegate.testName = description;

            NSLog(@"Using AB Prompt Test set: %@", [values objectForKey:@"description"]);
        }
    }

    if ([Switchboard hasExperimentValues:@"reviewMessages"]) {
        NSDictionary *values = [Switchboard getExperimentValueFromJSON:@"reviewMessages"];

        if (values) {
            NSArray *keys = [NSArray arrayWithObjects:@"doYouLikeAppTitle",
                             @"doYouLikeAppBody",
                             @"likeItButton",
                             @"dontLikeItButton",
                             @"askLaterButton",

                             @"askForReviewBody",
                             @"askForReviewTitle",
                             @"reviewButton",
                             @"noButton",
                             @"emailSubject",
                             @"emailBody",

                             @"daysUntilPrompt",
                             @"usesUntilPrompt",
                             @"eventsUntilPrompt",
                             @"daysBeforeReminding", nil];

            for (NSString *key in keys) {
                if ([values objectForKey:key]) {
                    [ask4AppReviews setValue:[values objectForKey:key] forKey:key];
                }
            }

            reviewsDelegate.testName = [NSString stringWithFormat:@"%@-%@", reviewsDelegate.testName, [values objectForKey: @"description"]];

            NSLog(@"review message test set: %@", reviewsDelegate.testName);
        }
    }

    ask4AppReviews.delegate = reviewsDelegate;

#ifdef DEBUG
//    ask4AppReviews.eventsUntilPrompt = 1;
//    ask4AppReviews.daysUntilPrompt = 0;
//    ask4AppReviews.usesUntilPrompt = 0;
//    ask4AppReviews.daysBeforeReminding = 0;
//    ask4AppReviews.timeRange = nil;
#endif
}
</code></pre>

<p>And here&rsquo;s the implementation of the delegate:</p>

<pre><code>@implementation AskForAppReviewsDelegate

-(void)ask4ReviewsDidAskQuestion:(Ask4AppReviews *)ask4AppReviews {
    [self trackEventWithAction:@"Asked Question" andTimeRange:ask4AppReviews.timeRange];
}
-(void)ask4ReviewsDidOptToRemindLaterFromQuestion:(Ask4AppReviews *)ask4AppReviews{
    [self trackEventWithAction:@"Remind from First Question" andTimeRange:ask4AppReviews.timeRange];
}
-(void)ask4ReviewsDidOpenEmailCompose:(Ask4AppReviews *)ask4AppReviews{
    [self trackEventWithAction:@"Compose Email" andTimeRange:ask4AppReviews.timeRange];
}
-(void)ask4ReviewsDidSendEmail:(Ask4AppReviews *)ask4AppReviews{
    [self trackEventWithAction:@"Send Email" andTimeRange:ask4AppReviews.timeRange];
}
-(void)ask4ReviewsDidNotSendEmail:(Ask4AppReviews *)ask4AppReviews{
    [self trackEventWithAction:@"Cancel Email" andTimeRange:ask4AppReviews.timeRange];
}

-(void)ask4ReviewsDidAskForReview:(Ask4AppReviews *)ask4AppReviews{
    [self trackEventWithAction:@"Asked for Review" andTimeRange:ask4AppReviews.timeRange];
}
-(void)ask4ReviewsDidOptToReview:(Ask4AppReviews *)ask4AppReviews{
    [self trackEventWithAction:@"Review Given" andTimeRange:ask4AppReviews.timeRange];
}
-(void)ask4ReviewsDidDeclineToReview:(Ask4AppReviews *)ask4AppReviews{
    [self trackEventWithAction:@"Declined to Review" andTimeRange:ask4AppReviews.timeRange];
}
-(void)ask4ReviewsDidOptToRemindLaterFromPromptToReview:(Ask4AppReviews *)ask4AppReviews{
    [self trackEventWithAction:@"Remind from Review Question" andTimeRange:ask4AppReviews.timeRange];
}

-(void) trackEventWithAction:(NSString*) action andTimeRange:(Ask4AppReviewsTimeRange*)timeRange
{
    NSString *val = [NSString stringWithFormat:@"%@-%@", self.testName, action];
    [[[GAI sharedInstance] defaultTracker] trackEventWithCategory:@"reviews" withAction:val withLabel:val withValue:nil];
}
@end
</code></pre>

<p>And the timeForReview experiment:</p>

<pre><code>function timeForReview() {

    if(empty($this-&gt;manager-&gt;uuid))
        return $this-&gt;manager-&gt;inactiveExperimentReturnArray();

    if($this-&gt;manager-&gt;isInBucket(0, 100)) {

        //return values
        $values = array();

        if($this-&gt;manager-&gt;isInBucket(0, 33)){

            $values['startHour'] = 0;
      $values['endHour'] = 12;
      $values['days'] = array(2,3,4,5,6);
      $values['description'] = 'weekday-mornings'; 

            return $this-&gt;manager-&gt;activeExperimentReturnArray($values);

        } else if($this-&gt;manager-&gt;isInBucket(33, 66)) {

      $values['startHour'] = 12;
      $values['endHour'] = 24;
      $values['days'] = array(2,3,4,5,6);
      $values['description'] = 'weekday-afternoon';

      return $this-&gt;manager-&gt;activeExperimentReturnArray($values);

    } else {

            $values['startHour'] = 0;
      $values['endHour'] = 24;
      $values['days'] = array(1,7);
      $values['description'] = 'weekday-afternoon';

            return $this-&gt;manager-&gt;activeExperimentReturnArray($values);
        }       
    }
    //user is not in experiment as default
    return $this-&gt;manager-&gt;inactiveExperimentReturnArray();
}
</code></pre>

<h2>Sources of Email</h2>

<p>One final thing. There&rsquo;s a few places our users can contact us from:</p>

<ol>
<li>From <a href="https://github.com/lewisalexander/Ask4AppReviewsABOptimised">Ask4AppReviewsABOptimised</a></li>
<li>From the About Screen in the <a href="https://itunes.apple.com/gb/app/body-trackit-weight-measurements/id579976234?mt=8">app</a></li>
<li>From our <a href="http://www.bodytrack.it">website</a></li>
</ol>


<p>We setup a different address for each one. This won&rsquo;t help with reviews, but it will give us some extra info about how people are contacting us and whether they&rsquo;re doing so because we ask them to or because they feel compelled.</p>

<h2>Summary</h2>

<p>We&rsquo;ve submitted these changes to Apple and I&rsquo;m really excited to see the difference it will make. Hopefully we&rsquo;ll think of other ways to increase our review rate, and if we do I&rsquo;ll share them here.</p>

<p>If there&rsquo;s other stuff we could optimise on, or that you&rsquo;ve had success with please be in touch!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how do we get better?]]></title>
    <link href="http://lewisalexander.github.io/blog/2013/07/12/how-do-we-get-better/"/>
    <updated>2013-07-12T14:12:00+10:00</updated>
    <id>http://lewisalexander.github.io/blog/2013/07/12/how-do-we-get-better</id>
    <content type="html"><![CDATA[<p>We sat down in a trendy art cafe in Chiang Mai. We wanted to work out what to do next with the app. We had a few unfinished features and a few unanswered questions. In short we needed some direction.</p>

<!-- more -->


<p>We started writing on cards all the things we wanted to do in all areas of the app, features, marketing, everything. As we got them down it became clear that there was a kind of hierarchy of goals. And we sorted the cards into the appropriate category.</p>

<p>Here&rsquo;s the hierarchy that we saw:</p>

<p><img src="/user-images/hierachy.png" alt="Make more profit from More Downloads from More Reviews from More Engaged Users
" /></p>

<p>Although they all feed up, it&rsquo;s possible to address things at the higher levels specifically. For example, getting more reviews could come from thinking more carefully about how and when we ask for reviews. And more downloads could come from improved screenshots or app store wording.</p>

<p>This was kind of a revelation for me. As a developer it&rsquo;s so easy to get tied into the ground level view where you want to add features. The reviews thing in particular, we have a bit of code that prompts the user after a number of times of using the app and we thought about the wording and how many uses was ok before asking. But we didn&rsquo;t think much beyond that. Might things like time of day make a difference?  The more we thought about it the more we thought it would.</p>

<p>We also realised there was a lot more analytics we could be collecting to help us understand our customers better and make more informed decisions about which features to include.</p>

<p>So we&rsquo;ve decided to park the new features and focus purely on the science of getting more review and more downloads for a little bit. As well as collecting more data to help us decide how to approach increasing engagement.</p>

<p>Here&rsquo;s the plan:</p>

<ul>
<li>Refine which screens on the app will ask a user for a review. Never ask just when the app opens</li>
<li>Add reporting to know how many times we ask for a review and how many times people say yes, no and later</li>
<li>A/B test the time of day to ask for a review. I have a theory that for our app asking in the afternoon will give better results than in the morning, but I want to test that</li>
<li>Add events for data collection and add goals in analytics</li>
<li>Collect data about which model our users are using. For whatever reason analytics doesn&rsquo;t gather this by default. This is particularly important as iOS 7 approaches as some devices will not be able to upgrade</li>
</ul>

]]></content>
  </entry>
  
</feed>
